{"version":3,"sources":["types/index.ts","reducers/postReducer.ts","reducers/index.ts","store.ts","reportWebVitals.ts","actions/postActions.ts","components/Post.tsx","components/AddPost.tsx","components/Posts.tsx","App.tsx","index.tsx"],"names":["FETCH_POSTS","DELETE_POST","ADD_POST","EDIT_POST","UPDATE_POST","SHOW_FORM","initialState","posts","postEdit","showForm","rootReducer","combineReducers","state","action","type","payload","meta","map","post","id","title","body","filter","middleware","thunk","store","createStore","compose","applyMiddleware","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Post","props","dispatch","useDispatch","onDeletePost","deletePost","onEditPost","editPost","TableRow","TableCell","component","scope","Button","variant","color","onClick","AddPost","useState","setId","setTitle","setBody","useSelector","handleSubmit","updatePost","addPost","uuidv4","useEffect","TextField","label","name","value","onChange","e","target","Posts","a","axios","get","response","data","catch","error","console","log","actionShowForm","TableContainer","Table","TableHead","TableBody","index","App","className","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.bc5e73df.chunk.js","sourcesContent":["export const FETCH_POSTS = \"FETCH_POSTS\";\r\nexport const DELETE_POST = \"DELETE_POST\";\r\nexport const ADD_POST = \"ADD_POST\";\r\nexport const EDIT_POST = \"EDIT_POST\";\r\nexport const UPDATE_POST = \"UPDATE_POST\";\r\nexport const SHOW_FORM = \"SHOW_FORM\";\r\n\r\ninterface FetchPostsAction {\r\n  type: typeof FETCH_POSTS;\r\n  payload: Post;\r\n}\r\n\r\ninterface DeletePostsAction {\r\n  type: typeof DELETE_POST;\r\n  meta: { id: string };\r\n}\r\n\r\ninterface AddPostsAction {\r\n  type: typeof ADD_POST;\r\n  meta: Post;\r\n}\r\n\r\ninterface EditPostsAction {\r\n  type: typeof EDIT_POST;\r\n  payload: Post;\r\n}\r\n\r\ninterface UpdatePostsAction {\r\n  type: typeof UPDATE_POST;\r\n  meta: { id: string; title: string; body: string };\r\n}\r\n\r\ninterface ShowFormAction {\r\n    type: typeof SHOW_FORM;\r\n  }\r\n  \r\nexport interface Post {\r\n  userId: string;\r\n  id: string;\r\n  title: string;\r\n  body: string;\r\n}\r\n\r\nexport interface PostState {\r\n  posts: Post[] | any;\r\n  postEdit: Post | null;\r\n  showForm: boolean;\r\n}\r\n\r\nexport type PostActionTypes =\r\n  | FetchPostsAction\r\n  | DeletePostsAction\r\n  | AddPostsAction\r\n  | EditPostsAction\r\n  | UpdatePostsAction\r\n  | ShowFormAction;\r\n","import {\r\n  PostState,\r\n  PostActionTypes,\r\n  FETCH_POSTS,\r\n  DELETE_POST,\r\n  ADD_POST,\r\n  EDIT_POST,\r\n  Post,\r\n  UPDATE_POST,\r\n  SHOW_FORM\r\n} from \"../types\";\r\n\r\nconst initialState: PostState = {\r\n  posts: [],\r\n  postEdit: null,\r\n  showForm: false\r\n};\r\n\r\nexport function postReducer(\r\n  state = initialState,\r\n  action: PostActionTypes\r\n): PostState {\r\n  switch (action.type) {\r\n    case FETCH_POSTS:\r\n      return {\r\n        ...state,\r\n        posts: action.payload,\r\n      };\r\n    case ADD_POST:\r\n      return {\r\n        ...state,\r\n        posts: [...state.posts, action.meta],\r\n      };\r\n    case EDIT_POST:\r\n      return {\r\n        ...state,\r\n        postEdit: action.payload,\r\n      };\r\n\r\n    case UPDATE_POST:\r\n      return {\r\n        ...state,\r\n        postEdit: null,\r\n        posts: state.posts.map((post: Post) => {\r\n          if (post.id === action.meta.id) {\r\n            post.title = action.meta.title;\r\n            post.body = action.meta.body;\r\n          }\r\n          return post;\r\n        }),\r\n      };\r\n\r\n    case DELETE_POST:\r\n      return {\r\n        ...state,\r\n        posts: state.posts.filter((post: Post) => post.id !== action.meta.id),\r\n      };\r\n\r\n      case SHOW_FORM:\r\n        return {\r\n          ...state,\r\n          showForm: !state.showForm,\r\n        };\r\n  \r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from \"redux\";\r\nimport { postReducer } from './postReducer'\r\n\r\nexport const rootReducer = combineReducers({\r\n  posts: postReducer,\r\n})\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>","import { createStore, applyMiddleware, compose } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { rootReducer } from \"./reducers/index\";\r\n\r\nconst middleware = [thunk];\r\n\r\nexport const store = createStore(\r\n  rootReducer,\r\n  compose(applyMiddleware(...middleware))\r\n);\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { Dispatch } from \"redux\";\r\nimport axios from \"axios\";\r\nimport { FETCH_POSTS, ADD_POST, DELETE_POST, PostActionTypes, Post, EDIT_POST, UPDATE_POST, SHOW_FORM } from \"../types\";\r\n\r\nconst URL= 'https://app-react-express-mongo.herokuapp.com/api/posts';\r\n\r\nexport const fetchPosts = () => async (dispatch: Dispatch<PostActionTypes>) => {\r\n  await axios\r\n    .get(URL)\r\n    .then((response) =>\r\n      dispatch({\r\n        type: FETCH_POSTS,\r\n        payload: response.data,\r\n      })\r\n    )\r\n    .catch((error) => console.log(error));\r\n};\r\n\r\nexport const addPost = (id: string, title: string, body:string) => {\r\n    return {\r\n      type: ADD_POST,\r\n      meta: {\r\n        id, title, body\r\n      },\r\n    };\r\n  };\r\n  \r\n  export const editPost = (post: Post) => {\r\n    return {\r\n      type: EDIT_POST,\r\n      payload: post\r\n    };\r\n  };\r\n\r\n  export const updatePost = (id: string, title: string, body:string) => {\r\n    return {\r\n      type: UPDATE_POST,\r\n      meta: {\r\n        id, title, body\r\n      },\r\n    };\r\n  };\r\n\r\n  export const showForm = () => {\r\n    return {\r\n      type: SHOW_FORM,\r\n    };\r\n  };\r\n\r\n\r\n  export const deletePost = (id: string) => {\r\n  return {\r\n    type: DELETE_POST,\r\n    meta: {\r\n      id,\r\n    },\r\n  };\r\n};\r\n","import React from \"react\";\r\nimport { Post as PostType } from \"../types\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { deletePost, editPost, showForm } from \"../actions/postActions\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nexport default function Post(props: { post: PostType }) {\r\n  const { id, title, body } = props.post;\r\n\tconst dispatch = useDispatch();\r\n\t\r\n\tconst onDeletePost = (id: string) => {\r\n\t\tdispatch(deletePost(id))\r\n\t}\r\n\r\n\tconst onEditPost = (post: PostType) => {\r\n\t\tdispatch(editPost(post))\r\n\t\tdispatch(showForm())\r\n\r\n\t}\r\n\r\n  return (\r\n    <TableRow>\r\n      <TableCell component=\"th\" scope=\"row\">\r\n        {id}\r\n      </TableCell>\r\n      <TableCell>{title}</TableCell>\r\n      <TableCell>{body}</TableCell>\r\n      <TableCell>\r\n        <Button variant=\"contained\" color=\"primary\" onClick={() => onEditPost(props.post)}>\r\n          edit\r\n        </Button>\r\n        <Button variant=\"contained\" color=\"secondary\" onClick={() => onDeletePost(id)}>\r\n          delete\r\n        </Button>\r\n      </TableCell>\r\n    </TableRow>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport { addPost, updatePost, showForm} from '../actions/postActions'\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { RootState } from \"../reducers\";\r\n\r\nexport default function AddPost() {\r\n\tconst [id, setId] = useState(\"\");\r\n  const [title, setTitle] = useState(\"\");\r\n\tconst [body, setBody] = useState(\"\");\r\n\tconst dispatch = useDispatch()\r\n\tconst postEdit = useSelector((state: RootState) => state.posts.postEdit);\r\n\t\r\n\tconst onShowForm = () => {\r\n\t\tdispatch(showForm())\r\n\t}\r\n\r\n  const handleSubmit = () => {\r\n    if (id) {\r\n      dispatch(updatePost(id, title, body));\r\n    } else {\r\n      dispatch(addPost(uuidv4(), title, body));\r\n    }\r\n    setId(\"\");\r\n    setTitle(\"\");\r\n\t\tsetBody(\"\");\r\n\t\tonShowForm();\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (postEdit) {\r\n      setId(postEdit.id);\r\n      setTitle(postEdit.title);\r\n      setBody(postEdit.body);\r\n    }\r\n    return () => {};\r\n  }, [postEdit]);\r\n\r\n  return (\r\n    <div>\r\n      <h3>{id !== \"\" ? \"Edit post\" : \"Add new post\"}</h3>\r\n      <TextField\r\n        label=\"Title\"\r\n        variant=\"outlined\"\r\n        name=\"title\"\r\n        value={title}\r\n        onChange={(e) => setTitle(e.target.value)}\r\n      />\r\n      <TextField\r\n        label=\"Body\"\r\n        variant=\"outlined\"\r\n        name=\"body\"\r\n        value={body}\r\n        onChange={(e) => setBody(e.target.value)}\r\n      />\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        type=\"submit\"\r\n        value=\"Submit\"\r\n        onClick={() => handleSubmit()}\r\n      >\r\n        Submit\r\n      </Button>\r\n\t</div>)\r\n}\r\n","import React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { RootState } from \"../reducers\";\r\nimport { fetchPosts, showForm as actionShowForm } from \"../actions/postActions\";\r\nimport { Post as PostType } from \"../types\";\r\nimport Post from \"./Post\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport AddPost from \"./AddPost\";\r\n\r\nexport default function Posts() {\r\n  const posts = useSelector((state: RootState) => state.posts.posts);\r\n  const showForm = useSelector((state: RootState) => state.posts.showForm);\r\n  const dispatch = useDispatch();\r\n\r\n\tconst onShowForm = () => {\r\n\t\tdispatch(actionShowForm())\r\n\t}\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchPosts());\r\n\t}, [dispatch]);\r\n\t\r\n  return (\r\n    <div>\r\n      <h1>Posts</h1>\r\n      {showForm ? (\r\n        <AddPost />\r\n      ) : (\r\n        <div>\r\n          <Button variant=\"contained\" color=\"primary\" onClick={() => onShowForm()}>\r\n            Add post\r\n          </Button>\r\n          <TableContainer>\r\n            <Table>\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell>id</TableCell>\r\n                  <TableCell>Title</TableCell>\r\n                  <TableCell>Body</TableCell>\r\n                  <TableCell>Actions</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {posts.map((post: PostType, index: number) => (\r\n                  <Post key={index} post={post} />\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Posts from './components/Posts';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n     <Posts />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","\nimport React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport { Provider } from 'react-redux'\nimport { store } from './store'\nimport reportWebVitals from './reportWebVitals';\n\nimport App from './App'\n\nconst rootElement = document.getElementById('root')\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  rootElement\n);\n\nreportWebVitals();\n"],"sourceRoot":""}