{"version":3,"sources":["types/index.ts","reducers/postReducer.ts","reducers/index.ts","store.ts","reportWebVitals.ts","actions/postActions.ts","components/Post.tsx","components/AddPost.tsx","components/Posts.tsx","App.tsx","index.tsx"],"names":["FETCH_POSTS","DELETE_POST","ADD_POST","EDIT_POST","UPDATE_POST","SHOW_FORM","initialState","posts","postEdit","showForm","rootReducer","combineReducers","state","action","type","payload","map","post","_id","title","body","filter","meta","middleware","thunk","store","createStore","compose","applyMiddleware","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","URL","window","location","hostname","Post","props","dispatch","useDispatch","onDeletePost","a","axios","delete","response","catch","error","console","log","deletePost","onEditPost","editPost","TableRow","TableCell","Button","variant","color","onClick","AddPost","useState","setId","setTitle","setBody","useSelector","handleSubmit","request","put","uuidv4","data","addPost","useEffect","TextField","label","name","value","onChange","e","target","Posts","get","actionShowForm","TableContainer","Table","TableHead","TableBody","index","App","className","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.1f9f415a.chunk.js","sourcesContent":["export const FETCH_POSTS = \"FETCH_POSTS\";\r\nexport const DELETE_POST = \"DELETE_POST\";\r\nexport const ADD_POST = \"ADD_POST\";\r\nexport const EDIT_POST = \"EDIT_POST\";\r\nexport const UPDATE_POST = \"UPDATE_POST\";\r\nexport const SHOW_FORM = \"SHOW_FORM\";\r\n\r\ninterface FetchPostsAction {\r\n  type: typeof FETCH_POSTS;\r\n  payload: Post;\r\n}\r\n\r\ninterface DeletePostsAction {\r\n  type: typeof DELETE_POST;\r\n  meta: { _id: string };\r\n}\r\n\r\ninterface AddPostsAction {\r\n  type: typeof ADD_POST;\r\n  payload: Post;\r\n}\r\n\r\ninterface EditPostsAction {\r\n  type: typeof EDIT_POST;\r\n  payload: Post;\r\n}\r\n\r\ninterface UpdatePostsAction {\r\n  type: typeof UPDATE_POST;\r\n  payload: Post;\r\n}\r\n\r\ninterface ShowFormAction {\r\n    type: typeof SHOW_FORM;\r\n  }\r\n  \r\nexport interface Post {\r\n  _id: string;\r\n  title: string;\r\n  body: string;\r\n}\r\n\r\nexport interface PostState {\r\n  posts: Post[] | any;\r\n  postEdit: Post | null;\r\n  showForm: boolean;\r\n}\r\n\r\nexport type PostActionTypes =\r\n  | FetchPostsAction\r\n  | DeletePostsAction\r\n  | AddPostsAction\r\n  | EditPostsAction\r\n  | UpdatePostsAction\r\n  | ShowFormAction;\r\n","import {\r\n  PostState,\r\n  PostActionTypes,\r\n  FETCH_POSTS,\r\n  DELETE_POST,\r\n  ADD_POST,\r\n  EDIT_POST,\r\n  Post,\r\n  UPDATE_POST,\r\n  SHOW_FORM\r\n} from \"../types\";\r\n\r\nconst initialState: PostState = {\r\n  posts: [],\r\n  postEdit: null,\r\n  showForm: false\r\n};\r\n\r\nexport function postReducer(\r\n  state = initialState,\r\n  action: PostActionTypes\r\n): PostState {\r\n  switch (action.type) {\r\n    case FETCH_POSTS:\r\n      return {\r\n        ...state,\r\n        posts: action.payload,\r\n      };\r\n    case ADD_POST:\r\n      return {\r\n        ...state,\r\n        posts: [...state.posts, action.payload],\r\n      };\r\n    case EDIT_POST:\r\n      return {\r\n        ...state,\r\n        postEdit: action.payload,\r\n      };\r\n\r\n    case UPDATE_POST:\r\n      return {\r\n        ...state,\r\n        postEdit: null,\r\n        posts: state.posts.map((post: Post) => {\r\n          if (post._id === action.payload._id) {\r\n            post.title = action.payload.title;\r\n            post.body = action.payload.body;\r\n          }\r\n          return post;\r\n        }),\r\n      };\r\n\r\n    case DELETE_POST:\r\n      return {\r\n        ...state,\r\n        posts: state.posts.filter((post: Post) => post._id !== action.meta._id),\r\n      };\r\n\r\n      case SHOW_FORM:\r\n        return {\r\n          ...state,\r\n          showForm: !state.showForm,\r\n        };\r\n  \r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from \"redux\";\r\nimport { postReducer } from './postReducer'\r\n\r\nexport const rootReducer = combineReducers({\r\n  posts: postReducer,\r\n})\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>","import { createStore, applyMiddleware, compose } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { rootReducer } from \"./reducers/index\";\r\n\r\nconst middleware = [thunk];\r\n\r\nexport const store = createStore(\r\n  rootReducer,\r\n  compose(applyMiddleware(...middleware))\r\n);\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { Dispatch } from \"redux\";\r\nimport axios from \"axios\";\r\nimport {\r\n  FETCH_POSTS,\r\n  ADD_POST,\r\n  DELETE_POST,\r\n  PostActionTypes,\r\n  Post,\r\n  EDIT_POST,\r\n  UPDATE_POST,\r\n  SHOW_FORM,\r\n} from \"../types\";\r\n\r\nconst URL =\r\n  window.location.hostname === \"localhost\"\r\n    ? \"http://localhost:2000/api/posts\"\r\n    : \"https://app-react-express-mongo.herokuapp.com/api/posts\";\r\n\r\nexport const fetchPosts = () => async (dispatch: Dispatch<PostActionTypes>) => {\r\n  await axios\r\n    .get(URL)\r\n    .then((response) =>\r\n      dispatch({\r\n        type: FETCH_POSTS,\r\n        payload: response.data,\r\n      })\r\n    )\r\n    .catch((error) => console.log(error));\r\n};\r\n\r\nexport const addPost = (request: Post) => async (\r\n  dispatch: Dispatch<PostActionTypes>\r\n) => {\r\n  await axios\r\n    .post(URL, request)\r\n    .then((response) =>\r\n      dispatch({\r\n        type: ADD_POST,\r\n        payload: response.data,\r\n      })\r\n    )\r\n    .catch((error) => console.log(error));\r\n};\r\n\r\nexport const editPost = (post: Post) => {\r\n  return {\r\n    type: EDIT_POST,\r\n    payload: post,\r\n  };\r\n};\r\n\r\nexport const updatePost = (request: Post) => async (\r\n  dispatch: Dispatch<PostActionTypes>\r\n) => {\r\n  await axios\r\n    .put(URL + \"/\" + request._id, request)\r\n    .then((response) =>\r\n      dispatch({\r\n        type: UPDATE_POST,\r\n        payload: request,\r\n      })\r\n    )\r\n    .catch((error) => console.log(error));\r\n};\r\n\r\nexport const showForm = () => {\r\n  return {\r\n    type: SHOW_FORM,\r\n  };\r\n};\r\n\r\nexport const deletePost = (_id: string) => async (\r\n  dispatch: Dispatch<PostActionTypes>\r\n) => {\r\n  await axios\r\n    .delete(URL + \"/\" + _id)\r\n    .then((response) =>\r\n      dispatch({\r\n        type: DELETE_POST,\r\n        meta: {\r\n          _id,\r\n        },\r\n      })\r\n    )\r\n    .catch((error) => console.log(error));\r\n};\r\n","import React from \"react\";\r\nimport { Post as PostType } from \"../types\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { deletePost, editPost, showForm } from \"../actions/postActions\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nexport default function Post(props: { post: PostType }) {\r\n  const { _id, title, body } = props.post;\r\n\tconst dispatch = useDispatch();\r\n\t\r\n\tconst onDeletePost = (_id: string) => {\r\n\t\tdispatch(deletePost(_id))\r\n\t}\r\n\r\n\tconst onEditPost = (post: PostType) => {\r\n\t\tdispatch(editPost(post))\r\n\t\tdispatch(showForm())\r\n\r\n\t}\r\n\r\n  return (\r\n    <TableRow>\r\n      <TableCell>{title}</TableCell>\r\n      <TableCell>{body}</TableCell>\r\n      <TableCell>\r\n        <Button variant=\"contained\" color=\"primary\" onClick={() => onEditPost(props.post)}>\r\n          edit\r\n        </Button>\r\n        <Button variant=\"contained\" color=\"secondary\" onClick={() => onDeletePost(_id)}>\r\n          delete\r\n        </Button>\r\n      </TableCell>\r\n    </TableRow>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport { addPost, updatePost, showForm } from \"../actions/postActions\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { RootState } from \"../reducers\";\r\n\r\nexport default function AddPost() {\r\n  const [_id, setId] = useState(\"\");\r\n  const [title, setTitle] = useState(\"\");\r\n  const [body, setBody] = useState(\"\");\r\n  const dispatch = useDispatch();\r\n  const postEdit = useSelector((state: RootState) => state.posts.postEdit);\r\n\r\n  const onShowForm = () => {\r\n    dispatch(showForm());\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    if (_id) {\r\n      dispatch(updatePost({ _id, title, body }));\r\n    } else {\r\n      setId(uuidv4());\r\n      dispatch(addPost({ _id, title, body }));\r\n    }\r\n    setId(\"\");\r\n    setTitle(\"\");\r\n    setBody(\"\");\r\n    onShowForm();\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (postEdit) {\r\n      setId(postEdit._id);\r\n      setTitle(postEdit.title);\r\n      setBody(postEdit.body);\r\n    }\r\n    return () => {};\r\n  }, [postEdit]);\r\n\r\n  return (\r\n    <div>\r\n      <h3>{_id !== \"\" ? \"Edit post\" : \"Add new post\"}</h3>\r\n      <TextField\r\n        label=\"Title\"\r\n        variant=\"outlined\"\r\n        name=\"title\"\r\n        value={title}\r\n        onChange={(e) => setTitle(e.target.value)}\r\n      />\r\n      <TextField\r\n        label=\"Body\"\r\n        variant=\"outlined\"\r\n        name=\"body\"\r\n        value={body}\r\n        onChange={(e) => setBody(e.target.value)}\r\n      />\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        type=\"submit\"\r\n        value=\"Submit\"\r\n        onClick={() => handleSubmit()}\r\n      >\r\n        Submit\r\n      </Button>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { RootState } from \"../reducers\";\r\nimport { fetchPosts, showForm as actionShowForm } from \"../actions/postActions\";\r\nimport { Post as PostType } from \"../types\";\r\nimport Post from \"./Post\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport AddPost from \"./AddPost\";\r\n\r\nexport default function Posts() {\r\n  const posts = useSelector((state: RootState) => state.posts.posts);\r\n  const showForm = useSelector((state: RootState) => state.posts.showForm);\r\n  const dispatch = useDispatch();\r\n\r\n\tconst onShowForm = () => {\r\n\t\tdispatch(actionShowForm())\r\n\t}\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchPosts());\r\n\t}, [dispatch]);\r\n\t\r\n  return (\r\n    <div>\r\n      <h1>Posts</h1>\r\n      {showForm ? (\r\n        <AddPost />\r\n      ) : (\r\n        <div>\r\n          <Button variant=\"contained\" color=\"primary\" onClick={() => onShowForm()}>\r\n            Add post\r\n          </Button>\r\n          <TableContainer>\r\n            <Table>\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell>Title</TableCell>\r\n                  <TableCell>Body</TableCell>\r\n                  <TableCell>Actions</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {posts.map((post: PostType, index: number) => (\r\n                  <Post key={index} post={post} />\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Posts from './components/Posts';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n     <Posts />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","\nimport React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport { Provider } from 'react-redux'\nimport { store } from './store'\nimport reportWebVitals from './reportWebVitals';\n\nimport App from './App'\n\nconst rootElement = document.getElementById('root')\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  rootElement\n);\n\nreportWebVitals();\n"],"sourceRoot":""}